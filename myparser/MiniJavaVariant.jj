options
{
  JAVA_UNICODE_ESCAPE = true;
  //  DEBUG_PARSER = true;
  //  DEBUG_LOOKAHEAD =true;
}

PARSER_BEGIN(MiniJavaVariantParser)
package myparser;
import syntaxtree.*;

public class MiniJavaVariantParser
{
  public static boolean hasError = false;
}

PARSER_END(MiniJavaVariantParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  < SINGLE_LINE_COMMENT :
    "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < FORMAL_COMMENT :
    "/**" (~[ "*" ])* "*"
    (
      "*"
    |
      (
        ~[ "*", "/" ] (~[ "*" ])* "*"
      )
    )*
    "/" >
| < MULTI_LINE_COMMENT :
    "/*" (~[ "*" ])* "*"
    (
      "*"
    |
      (
        ~[ "*", "/" ] (~[ "*" ])* "*"
      )
    )*
    "/" >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
}

TOKEN : /* OPERATORS */
{
  < BANG : "!" >
| < EXPONENTIAL : "**" >
| < DIVISION : "/" >
| < STAR : "*" >
| < LT : "<" >
| < OR : "||" >
| < SC_AND : "&&" >
| < PLUS : "+" >
| < MINUS : "-" >
| < ASSIGN : "=" >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < BOOLEAN : "boolean" >
| < CLASS : "class" >
| < ELSE : "else" >
| < EXTENDS : "extends" >
| < FALSE : "false" >
| < IF : "if" >
| < INT : "int" >
| < DOUBLE : "double" >
| < NEW : "new" >
| < PUBLIC : "public" >
| < RETURN : "return" >
| < STATIC : "static" >
| < THIS : "this" >
| < TRUE : "true" >
| < VOID : "void" >
| < WHILE : "while" >
| < PRINT : "System.out.println" >
| < MAIN : "main" >
| < STRING : "String" >
| < LENGTH : "length" >
| < FOR : "for" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL >
  | < HEX_LITERAL >
  | < OCTAL_LITERAL >
  >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
  //| < INVALID_HEX : "0" [ "x", "X" ] ([ "0"-"9", "a"-"z", "A"-"Z" ])* >
  //| < INVALID_OCTAL : "0" ([ "0"-"9" ])* >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER :
    [
    "$",
    "A"-"Z",
    "_",
    "a"-"z"
    ]
  >
|
  < #DIGIT :
    [
    "0"-"9"
    ]
  >
}


/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/


Program Goal() :
{
  MainClass m;
  ClassDeclList cl = new ClassDeclList(token);
  ClassDecl c;
}
{
  m = MainClass()
  (
    c = ClassDeclaration()
    {
      cl.addElement(c);
    }
  )*
  < EOF >
  {
    return new Program(m, cl, token);
  }
}

MainClass MainClass() :
{
  Identifier i1, i2;
  Statement s;
}
{
  "class" i1 = Identifier() "{"
  "public" "static" "void" "main" "(" "String" "[" "]" i2 = Identifier() ")"
  "{" s = Statement() "}"
  "}"
  {
    return new MainClass(i1, i2, s, token);
  }
}

ClassDecl ClassDeclaration() :
{
  ClassDecl c;
}
{
  (
    LOOKAHEAD(3)
    c = ClassDeclarationSimple()
  |
    c = ClassDeclarationExtends()
  )
  {
    return c;
  }
}

ClassDecl ClassDeclarationSimple() :
{
  Identifier i;
  VarDecl v;
  VarDeclList vl = new VarDeclList(token);
  MethodDecl m;
  MethodDeclList ml = new MethodDeclList(token);
}
{
  "class" i = Identifier() "{"
  (
    v = VarDeclaration()
    {
      vl.addElement(v);
    }
  )*
  (
    m = MethodDeclaration()
    {
      ml.addElement(m);
    }
  )*
  "}"
  {
    return new ClassDeclSimple(i, vl, ml, token);
  }
}

ClassDecl ClassDeclarationExtends() :
{
  Identifier i1, i2;
  VarDecl v;
  VarDeclList vl = new VarDeclList(token);
  MethodDecl m;
  MethodDeclList ml = new MethodDeclList(token);
}
{
  "class" i1 = Identifier() "extends" i2 = Identifier()
  "{"
  (
    v = VarDeclaration()
    {
      vl.addElement(v);
    }
  )*
  (
    m = MethodDeclaration()
    {
      ml.addElement(m);
    }
  )*
  "}"
  {
    return new ClassDeclExtends(i1, i2, vl, ml, token);
  }
}

VarDecl VarDeclaration() :
{
  Type t;
  Identifier i;
}
{
  t = Type() i = Identifier() ";"
  {
    return new VarDecl(t, i, token);
  }
}

MethodDecl MethodDeclaration() :
{
  Type t;
  Identifier i;
  FormalList fl = new FormalList(token);
  VarDecl v;
  VarDeclList vl = new VarDeclList(token);
  Statement s;
  StatementList sl = new StatementList(token);
  Exp e;
}
{
  "public" t = Type() i = Identifier()
  try
  {
    "("
    (
    fl = FormalParameterList()
    ) ?
    ")"
  }
  catch (ParseException exception)
  {
    System.out.println("Line " + token.beginLine + " Column " + token.beginColumn + ": invalid formal parameter list");
    hasError = true;
    Token tk;
    do
    {
      tk = getNextToken();
    }
    while (tk.kind != RPAREN);
  }
  "{"
  (
    LOOKAHEAD(2)
    v = VarDeclaration()
    {
      vl.addElement(v);
    }
  )*
  (
    s = Statement()
    {
      sl.addElement(s);
    }
  )*
  "return" e = Expression() ";" "}"
  {
    return new MethodDecl(t, i, fl, vl, sl, e, token);
  }
}

FormalList FormalParameterList() :
{
  FormalList fl = new FormalList(token);
  Formal f;
}
{
  f = FormalParameter()
  {
    fl.addElement(f);
  }
  (
    f = FormalParameterRest()
    {
      fl.addElement(f);
    }
  )*
  {
    return fl;
  }
}

Formal FormalParameter() :
{
  Type t = null;
  Identifier i = null;
}
{
  LOOKAHEAD(Type() Identifier())
  (
    t = Type() i = Identifier()
  )
  {
    return new Formal(t, i, token);
  }
| LOOKAHEAD(Type())
  (
    t = Type()
  )
  {
    System.out.println("Line " + token.beginLine + " Column " + token.beginColumn + ": identifier expected");
    hasError = true;
    return new Formal(t, i, token);
  }
| LOOKAHEAD(Identifier())
  (
    i = Identifier()
  )
  {
    System.out.println("Line " + token.beginLine + " Column " + token.beginColumn + ": identifier expected");
    hasError = true;
    return new Formal(t, i, token);
  }
}

Formal FormalParameterRest() :
{
  Formal f;
}
{
  "," f = FormalParameter()
  {
    return f;
  }
| f = FormalParameter()
  {
    System.out.println("Line " + token.beginLine + " Column " + token.beginColumn + ": , expected");
    hasError = true;
    return f;
  }
}

Type Type() :
{
  Type t;
}
{
  (
    LOOKAHEAD(3)
    t = ArrayType()
  |
    t = BooleanType()
  |
    t = IntegerType()
  |
    t = IdentifierType()
  |
    t = DoubleType()
  )
  {
    return t;
  }
}

Type ArrayType() :
{}
{
  "int" "[" "]"
  {
    return new IntArrayType(token);
  }
}

Type BooleanType() :
{}
{
  "boolean"
  {
    return new BooleanType(token);
  }
}

Type IntegerType() :
{}
{
  "int"
  {
    return new IntegerType(token);
  }
}

Type IdentifierType() :
{
  Token t;
}
{
  t = < IDENTIFIER >
  {
    return new IdentifierType(t.image,token);
  }
}

Type DoubleType() :
{}
{
  "double"
  {
    return new DoubleType(token);
  }
}

Statement Statement() :
{
  Statement s;
}
{
  (
    s = Block()
  |
    LOOKAHEAD(2)
    s = AssignmentStatement()
  |
    LOOKAHEAD(2)
    s = ArrayAssignmentStatement()
  |
    s = IfStatement()
  |
    s = WhileStatement()
  |
    s = PrintStatement()
  |
    s = ForStatement()
  )
  {
    return s;
  }
}

Statement Block() :
{
  Statement s;
  StatementList sl = new StatementList(token);
}
{
  "{"
  (
    s = Statement()
    {
      sl.addElement(s);
    }
  )*
  "}"
  {
    return new Block(sl, token);
  }
}

Statement AssignmentStatement() :
{
  Identifier i;
  Exp e;
}
{
  i = Identifier() "=" e = Expression() ";"
  {
    return new Assign(i, e, token);
  }
}

Statement ArrayAssignmentStatement() :
{
  Identifier i;
  Exp e1, e2;
}
{
  i = Identifier() "[" e1 = Expression() "]" "=" e2 = Expression() ";"
  {
    return new ArrayAssign(i, e1, e2, token);
  }
}

Statement IfStatement() :
{
  Exp e;
  Statement s1, s2;
}
{
  "if" "(" e = Expression() ")" s1 = Statement() "else" s2 = Statement()
  {
    return new If(e, s1, s2, token);
  }
}

Statement WhileStatement() :
{
  Exp e;
  Statement s;
}
{
  "while" "(" e = Expression() ")" s = Statement()
  {
    return new While(e, s, token);
  }
}

Statement PrintStatement() :
{
  Exp e;
}
{
  "System.out.println" "(" e = Expression() ")" ";"
  {
    return new Print(e, token);
  }
}

Statement ForStatement() :
{
  ForInit f;
  Exp e;
  Statement s;
  StmtExprList l;
}
{
  "for" "(" f = ForInit() ";" e = Expression() ";" l = StmtExprList() ")" s = Statement()
  {
    return new For(f, e, l, s, token);
  }
}

ForInit ForInit() :
{
  ForInit f;
}
{
  (
    LOOKAHEAD(Type() Identifier())
    f = LocalVariableDeclaration()
  |
    LOOKAHEAD(Identifier() "=")
    f = StmtExprList()
  )
  {
    return f;
  }
}

StmtExprList StmtExprList() :
{
  StmtExprList l = new StmtExprList(token);
  StmtExpr e;
}
{
  e = StmtExpr()
  {
    l.addElement(e);
  }
  (
    "," e = StmtExpr()
    {
      l.addElement(e);
    }
  )*
  {
    return l;
  }
}

StmtExpr StmtExpr() :
{
  Identifier i;
  Exp e;
  Exp e1;
  Exp e2;
}
{
  LOOKAHEAD(Identifier() "=")
  i = Identifier() "=" e = Expression()
  {
    return new AssignExpr(i, e, token);
  }
|
  LOOKAHEAD(Identifier() "[")
  i = Identifier() "[" e1 = Expression() "]" "=" e2 = Expression()
  {
    return new ArrayAssignExpr(i, e1, e2, token);
  }
}

LocalVariableDeclList LocalVariableDeclaration() :
{
  LocalVariableDeclList l;
  LocalVariableDecl d1;
  LocalVariableDecl d2;
}
{
  d1 = LocalVariableDeclarationFirst()
  {
    l = new LocalVariableDeclList(d1.t, token);
    l.addElement(d1);
  }
  (
    d2 = LocalVariableDeclarationRest(d1.t)
    {
      l.addElement(d2);
    }
  )*
  {
    return l;
  }
}

LocalVariableDecl LocalVariableDeclarationFirst() :
{
  Type t;
  Identifier i;
  Exp e;
}
{
  t = Type() i = Identifier() "=" e = Expression()
  {
    return new LocalVariableDecl(t, i, e, token);
  }
}

LocalVariableDecl LocalVariableDeclarationRest(Type t) :
{
  Identifier i;
  Exp e;
}
{
  "," i = Identifier() "=" e = Expression()
  {
    return new LocalVariableDecl(t, i, e, token);
  }
}

Exp Expression() :
{
  Exp e;
}
{
  (
    e = OrExpression()
    //    LOOKAHEAD(PrimaryExpression() "&&")
    //    e = AndExpression()
    //  |
    //    LOOKAHEAD(PrimaryExpression() "||")
    //    e = OrExpression()
    //  |
    //    LOOKAHEAD(PrimaryExpression() "<")
    //    e = CompareExpression()
    //  |
    //    LOOKAHEAD(PrimaryExpression() "+")
    //    e = PlusExpression()
    //  |
    //    LOOKAHEAD(PrimaryExpression() "-")
    //    e = MinusExpression()
    //  |
    //    LOOKAHEAD(PrimaryExpression() "/")
    //    e = DivisionExpression()
    //  |
    //    LOOKAHEAD(PrimaryExpression() "*")
    //    e = TimesExpression()
    //  |
    //    LOOKAHEAD(PrimaryExpression() "**")
    //    e = ExponentialExpression()
    //  |
    //    LOOKAHEAD(PrimaryExpression() "[")
    //    e = ArrayLookup()
    //  |
    //    LOOKAHEAD(PrimaryExpression() "." "length")
    //    e = ArrayLength()
    //  |
    //    LOOKAHEAD(PrimaryExpression() "." Identifier() "(")
    //    e = MessageSend()
    //  |
    //    e = PrimaryExpression()
  )
  {
    return e;
  }
}

Exp OrExpression() :
{
  Exp e1, e2;
  Exp r;
}
{
  e1 = AndExpression()
  (
    "||" e2 = AndExpression()
    {
      e1 = new Or(e1, e2, token);
    }
  )*
  {
    return e1;
  }
}

Exp AndExpression() :
{
  Exp e1, e2;
}
{
  e1 = CompareExpression()
  (
    "&&" e2 = CompareExpression()
    {
      e1 = new And(e1, e2, token);
    }
  )*
  {
    return e1;
  }
}

Exp CompareExpression() :
{
  Exp e1, e2;
}
{
  e1 = AdditiveExpression()
  (
    "<" e2 = AdditiveExpression()
    {
      e1 = new LessThan(e1, e2, token);
    }
  )*
  {
    return e1;
  }
}

Exp AdditiveExpression() :
{
  Exp e1, e2;
  Token op;
}
{
  e1 = MultiplicativeExpression()
  (
    LOOKAHEAD(("+"
  | "-") MultiplicativeExpression())
    (
      op = "+"
    | op = "-"
    )
    e2 = MultiplicativeExpression()
    {
      if (op.image == "+")
      {
        e1 = new Plus(e1, e2, token);
      }
      else
      {
        e1 = new Minus(e1, e2, token);
      }
    }
  )*
  {
    return e1;
  }
}

Exp PlusExpression() :
{
  Exp e1, e2;
}
{
  e1 = PrimaryExpression() "+" e2 = PrimaryExpression()
  {
    return new Plus(e1, e2, token);
  }
}

Exp MinusExpression() :
{
  Exp e1, e2;
}
{
  e1 = PrimaryExpression() "-" e2 = PrimaryExpression()
  {
    return new Minus(e1, e2, token);
  }
}

Exp MultiplicativeExpression() :
{
  Exp e1, e2;
  Token op;
}
{
  e1 = ExponentialExpression()
  (
    LOOKAHEAD(("*"
  | "/") ExponentialExpression())
    (
      op = "*"
    | op = "/"
    )
    e2 = ExponentialExpression()
    {
      //      e1 = new Multiplicative(e1, e2, op.image);
      if (op.image == "*")
      {
        e1 = new Times(e1, e2, token);
      }
      else
      {
        e1 = new Divides(e1, e2, token);
      }
    }
  )*
  {
    return e1;
  }
}

Exp DivisionExpression() :
{
  Exp e1, e2;
}
{
  e1 = PrimaryExpression() "/" e2 = PrimaryExpression()
  {
    return new Divides(e1, e2, token);
  }
}

Exp TimesExpression() :
{
  Exp e1, e2;
}
{
  e1 = PrimaryExpression() "*" e2 = PrimaryExpression()
  {
    return new Times(e1, e2, token);
  }
}

Exp ExponentialExpression() :
{
  Exp e1, e2;
}
{
  e1 = UnaryExpression()
  [
    "**" e2 = ExponentialExpression()
    {
      return new Exponential(e1, e2, token);
    }
  ]
  {
    return e1;
  }
}

Exp UnaryExpression() :
{
  Exp e;
  Token op;
}
{
  (
    op = "!" e = UnaryExpression()
    {
      return new Not(e, token);
    }
  |
    op = "-" e = UnaryExpression()
    {
      return new UnaryMinus(e, token);
    }
  |
    e = AccessExpression()
    {
      return e;
    }
  )
}

Exp AccessExpression() :
{
  Exp e;
}
{
  (
    LOOKAHEAD(PrimaryExpression() "[")
    e = ArrayLookup()
  | LOOKAHEAD(PrimaryExpression() "." "length")
    e = ArrayLength()
  | LOOKAHEAD(PrimaryExpression() "." Identifier() "(")
    e = MessageSend()
  | e = PrimaryExpression()
  )
  {
    return e;
  }
}

Exp ArrayLookup() :
{
  Exp e1, e2;
}
{
  e1 = PrimaryExpression() "[" e2 = Expression() "]"
  {
    return new ArrayLookup(e1, e2, token);
  }
}

Exp ArrayLength() :
{
  Exp e;
}
{
  e = PrimaryExpression() "." "length"
  {
    return new ArrayLength(e, token);
  }
}

Exp MessageSend() :
{
  Exp e;
  Identifier i;
  ExpList el = new ExpList(token);
}
{
  e = PrimaryExpression() "." i = Identifier()
  "("
  (
    el = ExpressionList()
  )?
  ")"
  {
    return new Call(e, i, el, token);
  }
}

ExpList ExpressionList() :
{
  Exp e1, e2;
  ExpList el = new ExpList(token);
}
{
  e1 = Expression()
  {
    el.addElement(e1);
  }
  (
    e2 = ExpressionRest()
    {
      el.addElement(e2);
    }
  )*
  {
    return el;
  }
}

Exp ExpressionRest() :
{
  Exp e;
}
{
  "," e = Expression()
  {
    return e;
  }
}

Exp PrimaryExpression() :
{
  Exp e;
}
{
  (
    e = IntegerLiteral()
  |
    e = TrueLiteral()
  |
    e = FalseLiteral()
  |
    e = IdentifierExp()
  |
    e = ThisExpression()
  |
    LOOKAHEAD(3)
    e = ArrayAllocationExpression()
  |
    e = AllocationExpression()
  |
    e = BracketExpression()
  )
  {
    return e;
  }
}

Exp UnaryMinusExpression() :
{
  Exp e;
}
{
  "-" e = Expression()
  {
    return new UnaryMinus(e, token);
  }
}

Exp IntegerLiteral() :
{
  Token t;
}
{
  t = < INTEGER_LITERAL >
  {
    return new IntegerLiteral(Integer.parseInt(t.image), token);
  }
}

Exp TrueLiteral() :
{}
{
  "true"
  {
    return new True(token);
  }
}

Exp FalseLiteral() :
{}
{
  "false"
  {
    return new False(token);
  }
}

Exp IdentifierExp() :
{
  Token t;
}
{
  t = < IDENTIFIER >
  {
    return new IdentifierExp(t.image, token);
  }
}

Exp ThisExpression() :
{}
{
  "this"
  {
    return new This(token);
  }
}

Exp ArrayAllocationExpression() :
{
  Exp e;
}
{
  "new" "int" "[" e = Expression() "]"
  {
    return new NewArray(e, token);
  }
}

Exp AllocationExpression() :
{
  Identifier i;
}
{
  "new" i = Identifier() "(" ")"
  {
    return new NewObject(i, token);
  }
}

Exp NotExpression() :
{
  Exp e;
}
{
  "!" e = Expression()
  {
    return new Not(e, token);
  }
}

Exp BracketExpression() :
{
  Exp e;
}
{
  "(" e = Expression() ")"
  {
    return e;
  }
}

Identifier Identifier() :
{
  Token t;
}
{
  t = < IDENTIFIER >
  {
    return new Identifier(t.image, token);
  }
}
