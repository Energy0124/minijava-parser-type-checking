/* Generated By:JavaCC: Do not edit this line. MiniJavaVariantParser.java */
package myparser;
import syntaxtree.*;

public class MiniJavaVariantParser implements MiniJavaVariantParserConstants {
  public static boolean hasError = false;

/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/
  static final public Program Goal() throws ParseException {
  MainClass m;
  ClassDeclList cl = new ClassDeclList(token);
  ClassDecl c;
    m = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = ClassDeclaration();
      cl.addElement(c);
    }
    jj_consume_token(0);
    {if (true) return new Program(m, cl, token);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
  Identifier i1, i2;
  Statement s;
    jj_consume_token(CLASS);
    i1 = Identifier();
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    i2 = Identifier();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    s = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
    {if (true) return new MainClass(i1, i2, s, token);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDeclaration() throws ParseException {
  ClassDecl c;
    if (jj_2_1(3)) {
      c = ClassDeclarationSimple();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        c = ClassDeclarationExtends();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDeclarationSimple() throws ParseException {
  Identifier i;
  VarDecl v;
  VarDeclList vl = new VarDeclList(token);
  MethodDecl m;
  MethodDeclList ml = new MethodDeclList(token);
    jj_consume_token(CLASS);
    i = Identifier();
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case DOUBLE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      v = VarDeclaration();
      vl.addElement(v);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      m = MethodDeclaration();
      ml.addElement(m);
    }
    jj_consume_token(RBRACE);
    {if (true) return new ClassDeclSimple(i, vl, ml, token);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDeclarationExtends() throws ParseException {
  Identifier i1, i2;
  VarDecl v;
  VarDeclList vl = new VarDeclList(token);
  MethodDecl m;
  MethodDeclList ml = new MethodDeclList(token);
    jj_consume_token(CLASS);
    i1 = Identifier();
    jj_consume_token(EXTENDS);
    i2 = Identifier();
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case DOUBLE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      v = VarDeclaration();
      vl.addElement(v);
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      m = MethodDeclaration();
      ml.addElement(m);
    }
    jj_consume_token(RBRACE);
    {if (true) return new ClassDeclExtends(i1, i2, vl, ml, token);}
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDeclaration() throws ParseException {
  Type t;
  Identifier i;
    t = Type();
    i = Identifier();
    jj_consume_token(SEMICOLON);
    {if (true) return new VarDecl(t, i, token);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDeclaration() throws ParseException {
  Type t;
  Identifier i;
  FormalList fl = new FormalList(token);
  VarDecl v;
  VarDeclList vl = new VarDeclList(token);
  Statement s;
  StatementList sl = new StatementList(token);
  Exp e;
    jj_consume_token(PUBLIC);
    t = Type();
    i = Identifier();
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case DOUBLE:
      case IDENTIFIER:
        fl = FormalParameterList();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException exception) {
    System.out.println("Line " + token.beginLine + " Column " + token.beginColumn + ": invalid formal parameter list");
    hasError = true;
    Token tk;
    do
    {
      tk = getNextToken();
    }
    while (tk.kind != RPAREN);
    }
    jj_consume_token(LBRACE);
    label_6:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_6;
      }
      v = VarDeclaration();
      vl.addElement(v);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case IF:
      case WHILE:
      case PRINT:
      case FOR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      s = Statement();
      sl.addElement(s);
    }
    jj_consume_token(RETURN);
    e = Expression();
    jj_consume_token(SEMICOLON);
    jj_consume_token(RBRACE);
    {if (true) return new MethodDecl(t, i, fl, vl, sl, e, token);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalList FormalParameterList() throws ParseException {
  FormalList fl = new FormalList(token);
  Formal f;
    f = FormalParameter();
    fl.addElement(f);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
      case BOOLEAN:
      case INT:
      case DOUBLE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      f = FormalParameterRest();
      fl.addElement(f);
    }
    {if (true) return fl;}
    throw new Error("Missing return statement in function");
  }

  static final public Formal FormalParameter() throws ParseException {
  Type t = null;
  Identifier i = null;
    if (jj_2_3(2147483647)) {
      t = Type();
      i = Identifier();
    {if (true) return new Formal(t, i, token);}
    } else if (jj_2_4(2147483647)) {
      t = Type();
    System.out.println("Line " + token.beginLine + " Column " + token.beginColumn + ": identifier expected");
    hasError = true;
    {if (true) return new Formal(t, i, token);}
    } else if (jj_2_5(2147483647)) {
      i = Identifier();
    System.out.println("Line " + token.beginLine + " Column " + token.beginColumn + ": identifier expected");
    hasError = true;
    {if (true) return new Formal(t, i, token);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Formal FormalParameterRest() throws ParseException {
  Formal f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      f = FormalParameter();
    {if (true) return f;}
      break;
    case BOOLEAN:
    case INT:
    case DOUBLE:
    case IDENTIFIER:
      f = FormalParameter();
    System.out.println("Line " + token.beginLine + " Column " + token.beginColumn + ": , expected");
    hasError = true;
    {if (true) return f;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
  Type t;
    if (jj_2_6(3)) {
      t = ArrayType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        t = BooleanType();
        break;
      case INT:
        t = IntegerType();
        break;
      case IDENTIFIER:
        t = IdentifierType();
        break;
      case DOUBLE:
        t = DoubleType();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Type ArrayType() throws ParseException {
    jj_consume_token(INT);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    {if (true) return new IntArrayType(token);}
    throw new Error("Missing return statement in function");
  }

  static final public Type BooleanType() throws ParseException {
    jj_consume_token(BOOLEAN);
    {if (true) return new BooleanType(token);}
    throw new Error("Missing return statement in function");
  }

  static final public Type IntegerType() throws ParseException {
    jj_consume_token(INT);
    {if (true) return new IntegerType(token);}
    throw new Error("Missing return statement in function");
  }

  static final public Type IdentifierType() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    {if (true) return new IdentifierType(t.image,token);}
    throw new Error("Missing return statement in function");
  }

  static final public Type DoubleType() throws ParseException {
    jj_consume_token(DOUBLE);
    {if (true) return new DoubleType(token);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
  Statement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      s = Block();
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_7(2)) {
        s = AssignmentStatement();
      } else if (jj_2_8(2)) {
        s = ArrayAssignmentStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          s = IfStatement();
          break;
        case WHILE:
          s = WhileStatement();
          break;
        case PRINT:
          s = PrintStatement();
          break;
        case FOR:
          s = ForStatement();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Block() throws ParseException {
  Statement s;
  StatementList sl = new StatementList(token);
    jj_consume_token(LBRACE);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case IF:
      case WHILE:
      case PRINT:
      case FOR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_9;
      }
      s = Statement();
      sl.addElement(s);
    }
    jj_consume_token(RBRACE);
    {if (true) return new Block(sl, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement AssignmentStatement() throws ParseException {
  Identifier i;
  Exp e;
    i = Identifier();
    jj_consume_token(ASSIGN);
    e = Expression();
    jj_consume_token(SEMICOLON);
    {if (true) return new Assign(i, e, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement ArrayAssignmentStatement() throws ParseException {
  Identifier i;
  Exp e1, e2;
    i = Identifier();
    jj_consume_token(LBRACKET);
    e1 = Expression();
    jj_consume_token(RBRACKET);
    jj_consume_token(ASSIGN);
    e2 = Expression();
    jj_consume_token(SEMICOLON);
    {if (true) return new ArrayAssign(i, e1, e2, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement IfStatement() throws ParseException {
  Exp e;
  Statement s1, s2;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    s1 = Statement();
    jj_consume_token(ELSE);
    s2 = Statement();
    {if (true) return new If(e, s1, s2, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement WhileStatement() throws ParseException {
  Exp e;
  Statement s;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    s = Statement();
    {if (true) return new While(e, s, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement PrintStatement() throws ParseException {
  Exp e;
    jj_consume_token(PRINT);
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
    {if (true) return new Print(e, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement ForStatement() throws ParseException {
  ForInit f;
  Exp e;
  Statement s;
  StmtExprList l;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    f = ForInit();
    jj_consume_token(SEMICOLON);
    e = Expression();
    jj_consume_token(SEMICOLON);
    l = StmtExprList();
    jj_consume_token(RPAREN);
    s = Statement();
    {if (true) return new For(f, e, l, s, token);}
    throw new Error("Missing return statement in function");
  }

  static final public ForInit ForInit() throws ParseException {
  ForInit f;
    if (jj_2_9(2147483647)) {
      f = LocalVariableDeclaration();
    } else if (jj_2_10(2147483647)) {
      f = StmtExprList();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public StmtExprList StmtExprList() throws ParseException {
  StmtExprList l = new StmtExprList(token);
  StmtExpr e;
    e = StmtExpr();
    l.addElement(e);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      e = StmtExpr();
      l.addElement(e);
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public StmtExpr StmtExpr() throws ParseException {
  Identifier i;
  Exp e;
  Exp e1;
  Exp e2;
    if (jj_2_11(2147483647)) {
      i = Identifier();
      jj_consume_token(ASSIGN);
      e = Expression();
    {if (true) return new AssignExpr(i, e, token);}
    } else if (jj_2_12(2147483647)) {
      i = Identifier();
      jj_consume_token(LBRACKET);
      e1 = Expression();
      jj_consume_token(RBRACKET);
      jj_consume_token(ASSIGN);
      e2 = Expression();
    {if (true) return new ArrayAssignExpr(i, e1, e2, token);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public LocalVariableDeclList LocalVariableDeclaration() throws ParseException {
  LocalVariableDeclList l;
  LocalVariableDecl d1;
  LocalVariableDecl d2;
    d1 = LocalVariableDeclarationFirst();
    l = new LocalVariableDeclList(d1.t, token);
    l.addElement(d1);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_11;
      }
      d2 = LocalVariableDeclarationRest(d1.t);
      l.addElement(d2);
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public LocalVariableDecl LocalVariableDeclarationFirst() throws ParseException {
  Type t;
  Identifier i;
  Exp e;
    t = Type();
    i = Identifier();
    jj_consume_token(ASSIGN);
    e = Expression();
    {if (true) return new LocalVariableDecl(t, i, e, token);}
    throw new Error("Missing return statement in function");
  }

  static final public LocalVariableDecl LocalVariableDeclarationRest(Type t) throws ParseException {
  Identifier i;
  Exp e;
    jj_consume_token(COMMA);
    i = Identifier();
    jj_consume_token(ASSIGN);
    e = Expression();
    {if (true) return new LocalVariableDecl(t, i, e, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Expression() throws ParseException {
  Exp e;
    e = OrExpression();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp OrExpression() throws ParseException {
  Exp e1, e2;
  Exp r;
    e1 = AndExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_12;
      }
      jj_consume_token(OR);
      e2 = AndExpression();
      e1 = new Or(e1, e2, token);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp AndExpression() throws ParseException {
  Exp e1, e2;
    e1 = CompareExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_13;
      }
      jj_consume_token(SC_AND);
      e2 = CompareExpression();
      e1 = new And(e1, e2, token);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp CompareExpression() throws ParseException {
  Exp e1, e2;
    e1 = AdditiveExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_14;
      }
      jj_consume_token(LT);
      e2 = AdditiveExpression();
      e1 = new LessThan(e1, e2, token);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp AdditiveExpression() throws ParseException {
  Exp e1, e2;
  Token op;
    e1 = MultiplicativeExpression();
    label_15:
    while (true) {
      if (jj_2_13(2147483647)) {
        ;
      } else {
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = MultiplicativeExpression();
      if (op.image == "+")
      {
        e1 = new Plus(e1, e2, token);
      }
      else
      {
        e1 = new Minus(e1, e2, token);
      }
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp PlusExpression() throws ParseException {
  Exp e1, e2;
    e1 = PrimaryExpression();
    jj_consume_token(PLUS);
    e2 = PrimaryExpression();
    {if (true) return new Plus(e1, e2, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp MinusExpression() throws ParseException {
  Exp e1, e2;
    e1 = PrimaryExpression();
    jj_consume_token(MINUS);
    e2 = PrimaryExpression();
    {if (true) return new Minus(e1, e2, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp MultiplicativeExpression() throws ParseException {
  Exp e1, e2;
  Token op;
    e1 = ExponentialExpression();
    label_16:
    while (true) {
      if (jj_2_14(2147483647)) {
        ;
      } else {
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        op = jj_consume_token(STAR);
        break;
      case DIVISION:
        op = jj_consume_token(DIVISION);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = ExponentialExpression();
      //      e1 = new Multiplicative(e1, e2, op.image);
      if (op.image == "*")
      {
        e1 = new Times(e1, e2, token);
      }
      else
      {
        e1 = new Divides(e1, e2, token);
      }
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp DivisionExpression() throws ParseException {
  Exp e1, e2;
    e1 = PrimaryExpression();
    jj_consume_token(DIVISION);
    e2 = PrimaryExpression();
    {if (true) return new Divides(e1, e2, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp TimesExpression() throws ParseException {
  Exp e1, e2;
    e1 = PrimaryExpression();
    jj_consume_token(STAR);
    e2 = PrimaryExpression();
    {if (true) return new Times(e1, e2, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExponentialExpression() throws ParseException {
  Exp e1, e2;
    e1 = UnaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPONENTIAL:
      jj_consume_token(EXPONENTIAL);
      e2 = ExponentialExpression();
      {if (true) return new Exponential(e1, e2, token);}
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp UnaryExpression() throws ParseException {
  Exp e;
  Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      op = jj_consume_token(BANG);
      e = UnaryExpression();
      {if (true) return new Not(e, token);}
      break;
    case MINUS:
      op = jj_consume_token(MINUS);
      e = UnaryExpression();
      {if (true) return new UnaryMinus(e, token);}
      break;
    case LPAREN:
    case FALSE:
    case NEW:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      e = AccessExpression();
      {if (true) return e;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp AccessExpression() throws ParseException {
  Exp e;
    if (jj_2_15(2147483647)) {
      e = ArrayLookup();
    } else if (jj_2_16(2147483647)) {
      e = ArrayLength();
    } else if (jj_2_17(2147483647)) {
      e = MessageSend();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case FALSE:
      case NEW:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case IDENTIFIER:
        e = PrimaryExpression();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ArrayLookup() throws ParseException {
  Exp e1, e2;
    e1 = PrimaryExpression();
    jj_consume_token(LBRACKET);
    e2 = Expression();
    jj_consume_token(RBRACKET);
    {if (true) return new ArrayLookup(e1, e2, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ArrayLength() throws ParseException {
  Exp e;
    e = PrimaryExpression();
    jj_consume_token(DOT);
    jj_consume_token(LENGTH);
    {if (true) return new ArrayLength(e, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp MessageSend() throws ParseException {
  Exp e;
  Identifier i;
  ExpList el = new ExpList(token);
    e = PrimaryExpression();
    jj_consume_token(DOT);
    i = Identifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case BANG:
    case MINUS:
    case FALSE:
    case NEW:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      el = ExpressionList();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return new Call(e, i, el, token);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpList ExpressionList() throws ParseException {
  Exp e1, e2;
  ExpList el = new ExpList(token);
    e1 = Expression();
    el.addElement(e1);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_17;
      }
      e2 = ExpressionRest();
      el.addElement(e2);
    }
    {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExpressionRest() throws ParseException {
  Exp e;
    jj_consume_token(COMMA);
    e = Expression();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp PrimaryExpression() throws ParseException {
  Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      e = IntegerLiteral();
      break;
    case TRUE:
      e = TrueLiteral();
      break;
    case FALSE:
      e = FalseLiteral();
      break;
    case IDENTIFIER:
      e = IdentifierExp();
      break;
    case THIS:
      e = ThisExpression();
      break;
    default:
      jj_la1[26] = jj_gen;
      if (jj_2_18(3)) {
        e = ArrayAllocationExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          e = AllocationExpression();
          break;
        case LPAREN:
          e = BracketExpression();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp UnaryMinusExpression() throws ParseException {
  Exp e;
    jj_consume_token(MINUS);
    e = Expression();
    {if (true) return new UnaryMinus(e, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp IntegerLiteral() throws ParseException {
  Token t;
    t = jj_consume_token(INTEGER_LITERAL);
    {if (true) return new IntegerLiteral(Integer.parseInt(t.image), token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp TrueLiteral() throws ParseException {
    jj_consume_token(TRUE);
    {if (true) return new True(token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp FalseLiteral() throws ParseException {
    jj_consume_token(FALSE);
    {if (true) return new False(token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp IdentifierExp() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    {if (true) return new IdentifierExp(t.image, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ThisExpression() throws ParseException {
    jj_consume_token(THIS);
    {if (true) return new This(token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ArrayAllocationExpression() throws ParseException {
  Exp e;
    jj_consume_token(NEW);
    jj_consume_token(INT);
    jj_consume_token(LBRACKET);
    e = Expression();
    jj_consume_token(RBRACKET);
    {if (true) return new NewArray(e, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp AllocationExpression() throws ParseException {
  Identifier i;
    jj_consume_token(NEW);
    i = Identifier();
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    {if (true) return new NewObject(i, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp NotExpression() throws ParseException {
  Exp e;
    jj_consume_token(BANG);
    e = Expression();
    {if (true) return new Not(e, token);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp BracketExpression() throws ParseException {
  Exp e;
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    {if (true) return new Identifier(t.image, token);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(EXPONENTIAL)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaVariantParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000000,0x20000000,0x10000000,0x0,0x10000000,0x0,0x10000000,0x800,0x10010000,0x10010000,0x10000000,0x800,0x0,0x800,0x10000,0x10000,0x800000,0x1000000,0x400000,0x6000000,0x300000,0x80000,0x4040200,0x200,0x4040200,0x10000,0x0,0x200,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x20000c,0x20,0x20000c,0x20,0x20000c,0x211802,0x20000c,0x20000c,0x20000c,0x0,0x11802,0x211802,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x220311,0x220311,0x220311,0x0,0x220301,0x10,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[18];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaVariantParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaVariantParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaVariantParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaVariantParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MiniJavaVariantParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaVariantParser(MiniJavaVariantParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaVariantParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
